/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Axiom, AxiomInterface } from "../Axiom";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50601680601d6000396000f3fe6080604052600080fdfea164736f6c6343000809000a";

type AxiomConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxiomConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Axiom__factory extends ContractFactory {
  constructor(...args: AxiomConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Axiom";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Axiom> {
    return super.deploy(overrides || {}) as Promise<Axiom>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Axiom {
    return super.attach(address) as Axiom;
  }
  connect(signer: Signer): Axiom__factory {
    return super.connect(signer) as Axiom__factory;
  }
  static readonly contractName: "Axiom";
  public readonly contractName: "Axiom";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxiomInterface {
    return new utils.Interface(_abi) as AxiomInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Axiom {
    return new Contract(address, _abi, signerOrProvider) as Axiom;
  }
}
